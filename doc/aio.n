.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "aio" "n" "1.1" "1.1" "Asynchronous IO Helpers for Tcl"
.hy
.SH NAME
.PP
aio - Asynchronous IO Helpers for Tcl
.SH SYNOPSIS
.PP
\f[B]package require aio\f[R] ?1.1?
.PP
\f[B]aio waitfor\f[R] \f[I]what\f[R] \f[I]chan\f[R] ?\f[I]seconds\f[R]?
.PP
\f[B]aio coro_vwait\f[R] \f[I]varname\f[R] ?\f[I]seconds\f[R]?
.PP
\f[B]aio gets\f[R] \f[I]chan\f[R] ?\f[I]seconds\f[R]?
.PP
\f[B]aio read\f[R] \f[I]chan\f[R] \f[I]length\f[R] ?\f[I]seconds\f[R]?
.SH DESCRIPTION
.PP
This module provides a collection of helpers for performing asynchronous
IO in a blocking style, using coroutines and vwaits (when not called in
a coroutine context).
Tcl provides excellent event-based non-blocking IO capabilities, but in
many situations the control flow is easier to reason about when written
in a linear, blocking fashion.
\f[B]aio\f[R] bridges this gap by presenting an interface that behaves
like blocking reads and writes (with timeouts) from the perspective of
the calling code, but operates on top of the native Tcl event driven IO
under the hood and never blocks (provided the channels it is given are
in non-blocking mode).
.SH COMMANDS
.TP
\f[B]aio waitfor\f[R] \f[I]what\f[R] \f[I]chan\f[R] ?\f[I]seconds\f[R]?
Block the caller until \f[I]chan\f[R] becomes readable or writable as
specified by \f[I]what\f[R], which must be a list containing at least
one of \[lq]readable\[rq] or \[lq]writable\[rq], or the timeout in
fractional seconds given by \f[I]seconds\f[R] occurs.
If \f[I]seconds\f[R] is a blank string or not specified, no timeout
applies.
If a timeout occurs an exception is thrown with the errorcode \f[B]AIO
TIMEOUT\f[R] \f[I]what\f[R].
.TP
\f[B]aio coro_vwait\f[R] \f[I]varname\f[R] ?\f[I]seconds\f[R]?
Block the caller until \f[I]varname\f[R] is written to, or
\f[I]seconds\f[R] fractional seconds elapse, if \f[I]seconds\f[R] is
specified and not a blank string.
If a timeout occurs an exception is thrown with the errorcode \f[B]AIO
TIMEOUT CORO_VWAIT\f[R] \f[I]varname\f[R].
The value of \f[I]varname\f[R] when it is first set is returned, which
may be different to its current value, because \f[B]coro_vwait\f[R] only
returns after the event loop is reached after the code that set the
variable.
Can only be called from a coroutine context.
.TP
\f[B]aio gets\f[R] \f[I]chan\f[R] ?\f[I]seconds\f[R]?
Blocks the caller until a line is read from \f[I]chan\f[R], or
\f[I]seconds\f[R] fractional seconds elapse, if \f[I]seconds\f[R] is
specified and not a blank string.
The line is returned if there is no timeout, or an exception is thrown
with the errorcode \f[B]AIO TIMEOUT readable\f[R] if there was.
If the channel is closed while waiting for a complete line an exception
is thrown with the errorcode \f[B]AIO CLOSED\f[R].
.TP
\f[B]aio read\f[R] \f[I]chan\f[R] \f[I]length\f[R] ?\f[I]seconds\f[R]?
Blocks the caller until \f[I]length\f[R] characters are read from
\f[I]chan\f[R], or \f[I]seconds\f[R] fractional seconds elapse, if
\f[I]seconds\f[R] is specified and not a blank string.
The characters read are returned or an exception is thrown with the
errorcode \f[B]AIO TIMEOUT readable\f[R] if the read timed out.
If the channel is closed while waiting for \f[I]length\f[R] characters
an exception is thrown with the errorcode \f[B]AIO CLOSED\f[R].
.SH EXAMPLES
.PP
Simple TCP server that starts a coroutine to handle each new connection,
and reads frames off the connection consisting of a line-delimited
character count followed by that many characters:
.IP
.nf
\f[C]
package require aio

proc conn_handler {sock ip port} {
    set cleanup [list apply {{sock args} {
        if {$sock in [chan names]} {
            close $sock
        }
    }}]
    trace add command [info coroutine] delete $cleanup

    # It\[aq]s usually more sensible to implement framing
    # in a stream protocol like TCP in binary mode,
    # but this example sets the channel mode to utf-8
    # to demonstrate that it is possible.  $len in
    # this case refers to the number of characters,
    # not bytes in the frame payload.
    chan configure $sock -blocking no -buffering none \[rs]
        -encoding utf-8 -translation lf -eofchar {}

    try {
        while 1 {
            set len     [aio gets $sock 10.0]
            set frame   [aio read $sock $len 10.0]
            puts \[dq]Got frame:\[rs]n$frame\[dq]
            puts $sock \[dq]acknowledge receipt of [string length $frame] characters\[dq]
        }
    } trap {AIO TIMEOUT} {errmsg options} {
        set what    [lindex [dict get $options -errorcode] 2]
        puts stderr \[dq]Timeout waiting for $what from $ip:$port\[dq]
    } trap {AIO CLOSED} {errmsg options} {
        puts stderr \[dq]Connection from $ip:$port lost\[dq]
    }
}

proc accept {sock ip port} {
    coroutine handle_$sock conn_handler $sock $ip $port
}

set listen  [socket -server accept 0]
lassign [chan configure $listen -sockname] \[rs]
    listen_addr listen_hostname listen_port
puts \[dq]Listening on $listen_addr:$listen_port\[dq]
vwait forever
\f[R]
.fi
.PP
Corresponding client:
.IP
.nf
\f[C]
package require aio

lassign $argv ip port

set sock    [socket -async $ip $port]

chan configure $sock -blocking no -buffering none \[rs]
    -encoding utf-8 -translation lf -eofchar {}

# Wait up to 5 seconds for the socket to connect
aio waitfor writable $sock 5.0

set msg \[dq]Some message containing\[rs]nnewlines and some \[rs]u306f unicode\[dq]
puts -nonewline $sock [string length $msg]\[rs]n$msg
puts \[dq]Response from server: [aio gets $sock 10.0]\[dq]

close $sock
\f[R]
.fi
.PP
Watch for changes in a global variable from multiple coroutines:
.IP
.nf
\f[C]
package require aio

proc watcher {} {
    global stats

    while 1 {
        set res [aio coro_vwait stats]
        puts \[dq][clock microseconds] [info coroutine] got stats: $res\[dq]
    }
}

coroutine coro_1 watcher
coroutine coro_2 watcher

set loops   0
while 1 {
    puts \[dq][clock microseconds] poll setting stats\[dq]
    set stats \[dq]stats, updated: [clock microseconds]\[dq]
    if {[incr loops] == 3} break

    puts \[dq][clock microseconds] poll waiting\[dq]
    after 1000 {set delay 1}
    vwait delay
}
puts \[dq][clock microseconds] draining pending events before exiting\[dq]
update
\f[R]
.fi
.PP
Produces output like:
.IP
.nf
\f[C]
1658393851230938 poll setting stats
1658393851230966 poll waiting
1658393851230973 ::coro_2 got stats: stats, updated: 1658393851230953
1658393851230978 ::coro_1 got stats: stats, updated: 1658393851230953
1658393852231263 poll setting stats
1658393852231317 poll waiting
1658393852231329 ::coro_1 got stats: stats, updated: 1658393852231284
1658393852231348 ::coro_2 got stats: stats, updated: 1658393852231284
1658393853231838 poll setting stats
1658393853231912 draining pending events before exiting
1658393853231929 ::coro_2 got stats: stats, updated: 1658393853231860
1658393853231946 ::coro_1 got stats: stats, updated: 1658393853231860
\f[R]
.fi
.SH COMPLETELY NON-BLOCKING NETWORKING
.PP
One reason to reach for tools like these is to achieve single-threaded
non-blocking network servers and clients, but in that case it\[cq]s
important to ensure that the thread can never block on IO (not servicing
events) or it will stave all the other sources and sinks.
Two common but possibly unexpected sources of IO blocking in Tcl (even
when all channels are set to non-blocking mode) are client socket
establishment and DNS resolution.
The first of these can be addressed with the \f[B]-async\f[R] flag to
the \f[B]socket\f[R] command, and then waiting in the event loop for the
connect to complete with \f[B]aio waitfor writable\f[R].
The second (DNS resolution delays) can be addressed with the resolve
package (https://github.com/cyanogilvie/resolve) by doing the name
lookup first in a non-blocking way and then handing the IP to
\f[B]socket\f[R].
.SH LICENSE
.PP
This package Copyright 2022 Cyan Ogilvie, and is made available under
the same license terms as the Tcl Core.
.SH AUTHORS
Cyan Ogilvie.
